class MyPanel extends Comet.Panel {
  setup() {
    this.options = {};
  }

  lossfct_find(parameters) {
    const los_fun = parameters.find(element => element.name == "loss_function");
    if (typeof(los_fun) != "undefined") {
      return los_fun.valueMax;
    }
    return "-";
  };
  
  loss_find(metrics) {
    const loss = metrics.find(element => element.name == "loss");
    if (typeof(loss) != "undefined") {
      return loss.valueMin;
    }
    return 0;
  };
  
  async draw(experimentKeys) {
    this.print("<h3>Loading experiments time analysis...</h3><hr>");

    const promises = experimentKeys.map(async experimentKey => {
		const result = {};
      result.metadata = await this.api.experimentMetadata(experimentKey);
      result.parameters = await this.api.experimentParameters(experimentKey);
      result.metrics = await this.api.experimentMetricsSummary(experimentKey);
      this.print(".", false);
      return result;
    });

    const results = await Promise.all(promises);
    console.log(results);
    const data = results.map(result => {
      const url = $("<a>")
        .attr("href", this.api.experimentURL(result.experimentKey))
        .attr("target", "_top")
        .text(result.metadata.experimentName)
        .get(0);
      const loss = this.loss_find(result.metrics);
      const lossfct = this.lossfct_find(result.parameters);
      //console.log(result);
      return { 
        exp: url, 
        loss: loss ,
        loss_fun: lossfct
      };
      
    });
    

    
    this.print("<h3>Experiments time analysis (seconds)</h3><hr>");
    this.print("<h4>Aggregate time statistics of experiments</h4>");

    this.print("<h4>Time taken per experiment</h4>");
	console.log(data);
    new Table(
      data,
      ["exp", "loss", "loss_fun" ],
      { exp: "Experiment Id", loss: "Loss", loss_fun : "Loss function" },
      "exp-time-table",
      "table table-striped"
    ).appendTo(this.id);
  }
}
